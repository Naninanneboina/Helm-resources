Lab 8: Using Secret in a Pod 

Example 1: 
##########

Create a secret "apikey" that holds a (made-up) API key:

$ echo -n "A19fh68B001j" > ./apikey.txt

$ kubectl create secret generic apikey --from-file=./apikey.txt -n project1

$ kubectl get secret -n project1
NAME                  TYPE                                  DATA   AGE
apikey                Opaque                                1      4m3s
default-token-gk96x   kubernetes.io/service-account-token   3      3h6m



$ kubectl describe secrets/apikey -n project1
Name:         apikey
Namespace:    project1
Labels:       <none>
Annotations:  <none>
Type:  Opaque
Data
====
apikey.txt:  12 bytes


Now let’s use the secret in a pod via a volume:


$ vim secret-in-pod.yaml

apiVersion: v1
kind: Pod
metadata:
  name: consume-secrets
  namespace: project1
spec:
  containers:
  - name: shell
    image: centos:7
    command:
      - "bin/bash"
      - "-c"
      - "sleep 10000"
    volumeMounts:
      - name: apikeyvol
        mountPath: "/tmp/apikey"
        readOnly: true
  volumes:
  - name: apikeyvol
    secret:
      secretName: apikey
	  
:wq (save and exit) 



$ kubectl apply -f secret-in-pod.yaml

$ kubectl get pod -n project1

NAME              READY   STATUS    RESTARTS   AGE
consume-secrets   1/1     Running   0          32s



If we now exec into the container we see the secret mounted at /tmp/apikey:

$ kubectl exec -it consume-secrets /bin/bash  -n project1 
[root@consume-secrets /]#  mount | grep apikey
tmpfs on /tmp/apikey type tmpfs (ro,relatime)

[root@consume-secrets /]# cat /tmp/apikey/apikey.txt
A19fh68B001j

[root@consume-secrets /]# exit 

$ kubectl delete -f secret-in-pod.yaml

$ kubectl delete secret apikey -n project1


Example 2:
##########

Convert your secret data to a base-64 representation


$ echo -n 'my-app' | base64
bXktYXBw

$ echo -n '39528$vdg7Jb' | base64
Mzk1MjgkdmRnN0pi


Create a Secret

$ vim secret-2.yaml

apiVersion: v1
kind: Secret
metadata:
  name: test-secret
  namespace: project1
data:
  username: bXktYXBw
  password: Mzk1MjgkdmRnN0pi
  
:wq (save and exit) 


$ kubectl apply -f secret-2.yaml

$ kubectl get secret test-secret -n project1

NAME          TYPE     DATA   AGE
test-secret   Opaque   2      25s



$ kubectl describe secret test-secret -n project1

Name:         test-secret
Namespace:    project1
Labels:       <none>
Annotations:
Type:         Opaque

Data
====
password:  12 bytes
username:  6 bytes


#################################################################################################################################
#																																#
#	Note: If you want to skip the Base64 encoding step, you can create a Secret by using the kubectl create secret command:		#
#																																#
#	kubectl create secret generic test-secret --from-literal=username='my-app' --from-literal=password='39528$vdg7Jb'			#
#																																#
#################################################################################################################################



Create a Pod that has access to the secret data through a Volume

$ vim secret-2-pod.yaml

apiVersion: v1
kind: Pod
metadata:
  name: secret-test-pod
  namespace: project1
spec:
  containers:
    - name: test-container
      image: nginx
      volumeMounts:
          # name must match the volume name below
          - name: secret-volume
            mountPath: /etc/secret-volume
  # The secret data is exposed to Containers in the Pod through a Volume.
  volumes:
    - name: secret-volume
      secret:
        secretName: test-secret
		
:wq (save and exit) 


$ kubectl apply -f secret-2-pod.yaml

$ kubectl get pod -n project1
NAME              READY   STATUS    RESTARTS   AGE
secret-test-pod   1/1     Running   0          19s


Get a shell into the Container that is running in your Pod:


$ kubectl exec -it secret-test-pod /bin/bash -n project1

root@secret-test-pod:/# cd /etc/secret-volume
root@secret-test-pod:/etc/secret-volume# ls
password  username
root@secret-test-pod:/etc/secret-volume# cat username; echo; cat password; echo
my-app
39528$vdg7Jb


Delete the Pod and Secret 

$ kubectl delete -f secret-2-pod.yaml

$ kubectl delete secret test-secret  -n project1



Example 3:  Define container environment variables using Secret data
##########


Define an environment variable as a key-value pair in a Secret:

$ kubectl create secret generic backend-user --from-literal=backend-username='backend-admin' -n project1 


Assign the backend-username value defined in the Secret to the SECRET_USERNAME environment variable in the Pod specification.

$ vim secret-3-pod.yaml

apiVersion: v1
kind: Pod
metadata:
  name: env-single-secret
  namespace: project1
spec:
  containers:
  - name: envars-test-container
    image: nginx
    env:
    - name: SECRET_USERNAME
      valueFrom:
        secretKeyRef:
          name: backend-user
          key: backend-username

:wq (save and exit) 


Create the Pod:

$ kubectl apply -f secret-3-pod.yaml

$ kubectl get pod -n project1
NAME                READY   STATUS    RESTARTS   AGE
env-single-secret   1/1     Running   0          15s


Now, the Pod’s output includes environment variable SECRET_USERNAME=backend-admin

$ kubectl exec -it env-single-secret /bin/bash -n project1

root@env-single-secret:/# env | grep SECRET_USERNAME
SECRET_USERNAME=backend-admin

root@env-single-secret:/# exit

$ kubectl delete -f secret-3-pod.yaml
$ kubectl delete secret backend-user -n project1


Example 4: Define container environment variables with data from multiple Secrets 
##########


Create two secrets 

$ kubectl create secret generic backend-user --from-literal=backend-username='backend-admin' -n project1
$ kubectl create secret generic db-user --from-literal=db-username='db-admin' -n project1


Define the environment variables in the Pod specification.

$ vim secret-4-pod.yaml

apiVersion: v1
kind: Pod
metadata:
  name: envvars-multiple-secrets
  namespace: project1
spec:
  containers:
  - name: envars-test-container
    image: nginx
    env:
    - name: BACKEND_USERNAME
      valueFrom:
        secretKeyRef:
          name: backend-user
          key: backend-username
    - name: DB_USERNAME
      valueFrom:
        secretKeyRef:
          name: db-user
          key: db-username
		  
:wq (save and exit) 


$ kubectl apply -f secret-4-pod.yaml


Now, the Pod’s output includes BACKEND_USERNAME=backend-admin and DB_USERNAME=db-admin environment variables.


$ kubectl get pod -n project1

NAME                       READY   STATUS    RESTARTS   AGE
envvars-multiple-secrets   1/1     Running   0          36s


root@envvars-multiple-secrets:/# env | egrep 'BACKEND_USERNAME|DB_USERNAME'
DB_USERNAME=db-admin
BACKEND_USERNAME=backend-admin

root@envvars-multiple-secrets:/# exit

$ kubectl delete -f secret-4-pod.yaml

$ kubectl delete secret backend-user db-user -n project1


Example 5: Configure all key-value pairs in a Secret as container environment variables
##########


Create a Secret containing multiple key-value pairs

$ kubectl create secret generic test-secret --from-literal=username='my-app' --from-literal=password='39528$vdg7Jb' -n project1 

$ kubectl get secret -n project1

NAME                  TYPE                                  DATA   AGE
default-token-gk96x   kubernetes.io/service-account-token   3      4h13m
test-secret           Opaque                                2      19s


Use envFrom to define all of the Secret’s data as container environment variables. 
The key from the Secret becomes the environment variable name in the Pod.


$ vim secret-5-pod.yaml

apiVersion: v1
kind: Pod
metadata:
  name: envfrom-secret
  namespace: project1
spec:
  containers:
  - name: envars-test-container
    image: nginx
    envFrom:
    - secretRef:
        name: test-secret


:wq (save and exit) 


Create the Pod and verify it: 

$ kubectl create -f secret-5-pod.yaml

$ kubectl get pod -n project1 
NAME             READY   STATUS    RESTARTS   AGE
envfrom-secret   1/1     Running   0          12s

root@envfrom-secret:/# env | egrep 'username|password'
username=my-app
password=39528$vdg7Jb

root@envfrom-secret:/# exit


Delete the Pod and Secrets: 

$ kubectl delete -f secret-5-pod.yaml

$ kubectl delete secret test-secret -n project1


##############################################